//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SumoWCFTest.SumoWCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeStepTDB", Namespace="http://schemas.datacontract.org/2004/07/SumoWCFService")]
    [System.SerializableAttribute()]
    public partial class TimeStepTDB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SumoWCFTest.SumoWCFService.VehicleTDB[] vehiclesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SumoWCFTest.SumoWCFService.VehicleTDB[] vehicles {
            get {
                return this.vehiclesField;
            }
            set {
                if ((object.ReferenceEquals(this.vehiclesField, value) != true)) {
                    this.vehiclesField = value;
                    this.RaisePropertyChanged("vehicles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleTDB", Namespace="http://schemas.datacontract.org/2004/07/SumoWCFService")]
    [System.SerializableAttribute()]
    public partial class VehicleTDB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float angleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float latitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float longitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float angle {
            get {
                return this.angleField;
            }
            set {
                if ((this.angleField.Equals(value) != true)) {
                    this.angleField = value;
                    this.RaisePropertyChanged("angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float latitude {
            get {
                return this.latitudeField;
            }
            set {
                if ((this.latitudeField.Equals(value) != true)) {
                    this.latitudeField = value;
                    this.RaisePropertyChanged("latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float longitude {
            get {
                return this.longitudeField;
            }
            set {
                if ((this.longitudeField.Equals(value) != true)) {
                    this.longitudeField = value;
                    this.RaisePropertyChanged("longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SumoWCFService.ISumoService")]
    public interface ISumoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/InitializeSimulation", ReplyAction="http://tempuri.org/ISumoService/InitializeSimulationResponse")]
        int InitializeSimulation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/InitializeSimulation", ReplyAction="http://tempuri.org/ISumoService/InitializeSimulationResponse")]
        System.Threading.Tasks.Task<int> InitializeSimulationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/EndSimulation", ReplyAction="http://tempuri.org/ISumoService/EndSimulationResponse")]
        int EndSimulation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/EndSimulation", ReplyAction="http://tempuri.org/ISumoService/EndSimulationResponse")]
        System.Threading.Tasks.Task<int> EndSimulationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/RestartSimulation", ReplyAction="http://tempuri.org/ISumoService/RestartSimulationResponse")]
        int RestartSimulation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/RestartSimulation", ReplyAction="http://tempuri.org/ISumoService/RestartSimulationResponse")]
        System.Threading.Tasks.Task<int> RestartSimulationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/RunSingleStep", ReplyAction="http://tempuri.org/ISumoService/RunSingleStepResponse")]
        int RunSingleStep();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/RunSingleStep", ReplyAction="http://tempuri.org/ISumoService/RunSingleStepResponse")]
        System.Threading.Tasks.Task<int> RunSingleStepAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/RunElapsedTime", ReplyAction="http://tempuri.org/ISumoService/RunElapsedTimeResponse")]
        int RunElapsedTime(int elapsedTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/RunElapsedTime", ReplyAction="http://tempuri.org/ISumoService/RunElapsedTimeResponse")]
        System.Threading.Tasks.Task<int> RunElapsedTimeAsync(int elapsedTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetLastTimeStep", ReplyAction="http://tempuri.org/ISumoService/GetLastTimeStepResponse")]
        SumoWCFTest.SumoWCFService.TimeStepTDB GetLastTimeStep();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetLastTimeStep", ReplyAction="http://tempuri.org/ISumoService/GetLastTimeStepResponse")]
        System.Threading.Tasks.Task<SumoWCFTest.SumoWCFService.TimeStepTDB> GetLastTimeStepAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetTimeStep", ReplyAction="http://tempuri.org/ISumoService/GetTimeStepResponse")]
        SumoWCFTest.SumoWCFService.TimeStepTDB GetTimeStep(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetTimeStep", ReplyAction="http://tempuri.org/ISumoService/GetTimeStepResponse")]
        System.Threading.Tasks.Task<SumoWCFTest.SumoWCFService.TimeStepTDB> GetTimeStepAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetNumberOfTimeSteps", ReplyAction="http://tempuri.org/ISumoService/GetNumberOfTimeStepsResponse")]
        int GetNumberOfTimeSteps();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetNumberOfTimeSteps", ReplyAction="http://tempuri.org/ISumoService/GetNumberOfTimeStepsResponse")]
        System.Threading.Tasks.Task<int> GetNumberOfTimeStepsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/LonLatTo2DPosition", ReplyAction="http://tempuri.org/ISumoService/LonLatTo2DPositionResponse")]
        double[] LonLatTo2DPosition(double lon, double lat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/LonLatTo2DPosition", ReplyAction="http://tempuri.org/ISumoService/LonLatTo2DPositionResponse")]
        System.Threading.Tasks.Task<double[]> LonLatTo2DPositionAsync(double lon, double lat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetEdgeList", ReplyAction="http://tempuri.org/ISumoService/GetEdgeListResponse")]
        string[] GetEdgeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetEdgeList", ReplyAction="http://tempuri.org/ISumoService/GetEdgeListResponse")]
        System.Threading.Tasks.Task<string[]> GetEdgeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeLength", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeLengthResponse")]
        double GetVehicleTypeLength(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeLength", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeLengthResponse")]
        System.Threading.Tasks.Task<double> GetVehicleTypeLengthAsync(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeWidth", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeWidthResponse")]
        double GetVehicleTypeWidth(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeWidth", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeWidthResponse")]
        System.Threading.Tasks.Task<double> GetVehicleTypeWidthAsync(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeMaxAccel", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeMaxAccelResponse")]
        double GetVehicleTypeMaxAccel(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeMaxAccel", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeMaxAccelResponse")]
        System.Threading.Tasks.Task<double> GetVehicleTypeMaxAccelAsync(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeMaxSpeed", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeMaxSpeedResponse")]
        double GetVehicleTypeMaxSpeed(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeMaxSpeed", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeMaxSpeedResponse")]
        System.Threading.Tasks.Task<double> GetVehicleTypeMaxSpeedAsync(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeMaxDecel", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeMaxDecelResponse")]
        double GetVehicleTypeMaxDecel(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleTypeMaxDecel", ReplyAction="http://tempuri.org/ISumoService/GetVehicleTypeMaxDecelResponse")]
        System.Threading.Tasks.Task<double> GetVehicleTypeMaxDecelAsync(string vehType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleRouteId", ReplyAction="http://tempuri.org/ISumoService/GetVehicleRouteIdResponse")]
        string GetVehicleRouteId(string vehId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleRouteId", ReplyAction="http://tempuri.org/ISumoService/GetVehicleRouteIdResponse")]
        System.Threading.Tasks.Task<string> GetVehicleRouteIdAsync(string vehId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleLaneIndex", ReplyAction="http://tempuri.org/ISumoService/GetVehicleLaneIndexResponse")]
        int GetVehicleLaneIndex(string vehId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetVehicleLaneIndex", ReplyAction="http://tempuri.org/ISumoService/GetVehicleLaneIndexResponse")]
        System.Threading.Tasks.Task<int> GetVehicleLaneIndexAsync(string vehId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetEdgesInRoute", ReplyAction="http://tempuri.org/ISumoService/GetEdgesInRouteResponse")]
        string[] GetEdgesInRoute(string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/GetEdgesInRoute", ReplyAction="http://tempuri.org/ISumoService/GetEdgesInRouteResponse")]
        System.Threading.Tasks.Task<string[]> GetEdgesInRouteAsync(string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/ChangeVehicleSpeed", ReplyAction="http://tempuri.org/ISumoService/ChangeVehicleSpeedResponse")]
        int ChangeVehicleSpeed(string vehId, double speed, int ms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/ChangeVehicleSpeed", ReplyAction="http://tempuri.org/ISumoService/ChangeVehicleSpeedResponse")]
        System.Threading.Tasks.Task<int> ChangeVehicleSpeedAsync(string vehId, double speed, int ms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/ChangeVehicleMaxSpeed", ReplyAction="http://tempuri.org/ISumoService/ChangeVehicleMaxSpeedResponse")]
        int ChangeVehicleMaxSpeed(string vehId, double maxSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/ChangeVehicleMaxSpeed", ReplyAction="http://tempuri.org/ISumoService/ChangeVehicleMaxSpeedResponse")]
        System.Threading.Tasks.Task<int> ChangeVehicleMaxSpeedAsync(string vehId, double maxSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/ResumeVehicleBehaviour", ReplyAction="http://tempuri.org/ISumoService/ResumeVehicleBehaviourResponse")]
        int ResumeVehicleBehaviour(string vehId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/ResumeVehicleBehaviour", ReplyAction="http://tempuri.org/ISumoService/ResumeVehicleBehaviourResponse")]
        System.Threading.Tasks.Task<int> ResumeVehicleBehaviourAsync(string vehId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/AddNewVehicle", ReplyAction="http://tempuri.org/ISumoService/AddNewVehicleResponse")]
        int AddNewVehicle(string vehId, string type, string routeId, int departTime, double departPosition, double departSpeed, byte departLane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/AddNewVehicle", ReplyAction="http://tempuri.org/ISumoService/AddNewVehicleResponse")]
        System.Threading.Tasks.Task<int> AddNewVehicleAsync(string vehId, string type, string routeId, int departTime, double departPosition, double departSpeed, byte departLane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/AddStopInVehicle", ReplyAction="http://tempuri.org/ISumoService/AddStopInVehicleResponse")]
        int AddStopInVehicle(string vehId, string edgeId, double position, byte laneIndex, int durationInMs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISumoService/AddStopInVehicle", ReplyAction="http://tempuri.org/ISumoService/AddStopInVehicleResponse")]
        System.Threading.Tasks.Task<int> AddStopInVehicleAsync(string vehId, string edgeId, double position, byte laneIndex, int durationInMs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISumoServiceChannel : SumoWCFTest.SumoWCFService.ISumoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SumoServiceClient : System.ServiceModel.ClientBase<SumoWCFTest.SumoWCFService.ISumoService>, SumoWCFTest.SumoWCFService.ISumoService {
        
        public SumoServiceClient() {
        }
        
        public SumoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SumoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SumoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SumoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int InitializeSimulation() {
            return base.Channel.InitializeSimulation();
        }
        
        public System.Threading.Tasks.Task<int> InitializeSimulationAsync() {
            return base.Channel.InitializeSimulationAsync();
        }
        
        public int EndSimulation() {
            return base.Channel.EndSimulation();
        }
        
        public System.Threading.Tasks.Task<int> EndSimulationAsync() {
            return base.Channel.EndSimulationAsync();
        }
        
        public int RestartSimulation() {
            return base.Channel.RestartSimulation();
        }
        
        public System.Threading.Tasks.Task<int> RestartSimulationAsync() {
            return base.Channel.RestartSimulationAsync();
        }
        
        public int RunSingleStep() {
            return base.Channel.RunSingleStep();
        }
        
        public System.Threading.Tasks.Task<int> RunSingleStepAsync() {
            return base.Channel.RunSingleStepAsync();
        }
        
        public int RunElapsedTime(int elapsedTime) {
            return base.Channel.RunElapsedTime(elapsedTime);
        }
        
        public System.Threading.Tasks.Task<int> RunElapsedTimeAsync(int elapsedTime) {
            return base.Channel.RunElapsedTimeAsync(elapsedTime);
        }
        
        public SumoWCFTest.SumoWCFService.TimeStepTDB GetLastTimeStep() {
            return base.Channel.GetLastTimeStep();
        }
        
        public System.Threading.Tasks.Task<SumoWCFTest.SumoWCFService.TimeStepTDB> GetLastTimeStepAsync() {
            return base.Channel.GetLastTimeStepAsync();
        }
        
        public SumoWCFTest.SumoWCFService.TimeStepTDB GetTimeStep(int index) {
            return base.Channel.GetTimeStep(index);
        }
        
        public System.Threading.Tasks.Task<SumoWCFTest.SumoWCFService.TimeStepTDB> GetTimeStepAsync(int index) {
            return base.Channel.GetTimeStepAsync(index);
        }
        
        public int GetNumberOfTimeSteps() {
            return base.Channel.GetNumberOfTimeSteps();
        }
        
        public System.Threading.Tasks.Task<int> GetNumberOfTimeStepsAsync() {
            return base.Channel.GetNumberOfTimeStepsAsync();
        }
        
        public double[] LonLatTo2DPosition(double lon, double lat) {
            return base.Channel.LonLatTo2DPosition(lon, lat);
        }
        
        public System.Threading.Tasks.Task<double[]> LonLatTo2DPositionAsync(double lon, double lat) {
            return base.Channel.LonLatTo2DPositionAsync(lon, lat);
        }
        
        public string[] GetEdgeList() {
            return base.Channel.GetEdgeList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetEdgeListAsync() {
            return base.Channel.GetEdgeListAsync();
        }
        
        public double GetVehicleTypeLength(string vehType) {
            return base.Channel.GetVehicleTypeLength(vehType);
        }
        
        public System.Threading.Tasks.Task<double> GetVehicleTypeLengthAsync(string vehType) {
            return base.Channel.GetVehicleTypeLengthAsync(vehType);
        }
        
        public double GetVehicleTypeWidth(string vehType) {
            return base.Channel.GetVehicleTypeWidth(vehType);
        }
        
        public System.Threading.Tasks.Task<double> GetVehicleTypeWidthAsync(string vehType) {
            return base.Channel.GetVehicleTypeWidthAsync(vehType);
        }
        
        public double GetVehicleTypeMaxAccel(string vehType) {
            return base.Channel.GetVehicleTypeMaxAccel(vehType);
        }
        
        public System.Threading.Tasks.Task<double> GetVehicleTypeMaxAccelAsync(string vehType) {
            return base.Channel.GetVehicleTypeMaxAccelAsync(vehType);
        }
        
        public double GetVehicleTypeMaxSpeed(string vehType) {
            return base.Channel.GetVehicleTypeMaxSpeed(vehType);
        }
        
        public System.Threading.Tasks.Task<double> GetVehicleTypeMaxSpeedAsync(string vehType) {
            return base.Channel.GetVehicleTypeMaxSpeedAsync(vehType);
        }
        
        public double GetVehicleTypeMaxDecel(string vehType) {
            return base.Channel.GetVehicleTypeMaxDecel(vehType);
        }
        
        public System.Threading.Tasks.Task<double> GetVehicleTypeMaxDecelAsync(string vehType) {
            return base.Channel.GetVehicleTypeMaxDecelAsync(vehType);
        }
        
        public string GetVehicleRouteId(string vehId) {
            return base.Channel.GetVehicleRouteId(vehId);
        }
        
        public System.Threading.Tasks.Task<string> GetVehicleRouteIdAsync(string vehId) {
            return base.Channel.GetVehicleRouteIdAsync(vehId);
        }
        
        public int GetVehicleLaneIndex(string vehId) {
            return base.Channel.GetVehicleLaneIndex(vehId);
        }
        
        public System.Threading.Tasks.Task<int> GetVehicleLaneIndexAsync(string vehId) {
            return base.Channel.GetVehicleLaneIndexAsync(vehId);
        }
        
        public string[] GetEdgesInRoute(string routeId) {
            return base.Channel.GetEdgesInRoute(routeId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetEdgesInRouteAsync(string routeId) {
            return base.Channel.GetEdgesInRouteAsync(routeId);
        }
        
        public int ChangeVehicleSpeed(string vehId, double speed, int ms) {
            return base.Channel.ChangeVehicleSpeed(vehId, speed, ms);
        }
        
        public System.Threading.Tasks.Task<int> ChangeVehicleSpeedAsync(string vehId, double speed, int ms) {
            return base.Channel.ChangeVehicleSpeedAsync(vehId, speed, ms);
        }
        
        public int ChangeVehicleMaxSpeed(string vehId, double maxSpeed) {
            return base.Channel.ChangeVehicleMaxSpeed(vehId, maxSpeed);
        }
        
        public System.Threading.Tasks.Task<int> ChangeVehicleMaxSpeedAsync(string vehId, double maxSpeed) {
            return base.Channel.ChangeVehicleMaxSpeedAsync(vehId, maxSpeed);
        }
        
        public int ResumeVehicleBehaviour(string vehId) {
            return base.Channel.ResumeVehicleBehaviour(vehId);
        }
        
        public System.Threading.Tasks.Task<int> ResumeVehicleBehaviourAsync(string vehId) {
            return base.Channel.ResumeVehicleBehaviourAsync(vehId);
        }
        
        public int AddNewVehicle(string vehId, string type, string routeId, int departTime, double departPosition, double departSpeed, byte departLane) {
            return base.Channel.AddNewVehicle(vehId, type, routeId, departTime, departPosition, departSpeed, departLane);
        }
        
        public System.Threading.Tasks.Task<int> AddNewVehicleAsync(string vehId, string type, string routeId, int departTime, double departPosition, double departSpeed, byte departLane) {
            return base.Channel.AddNewVehicleAsync(vehId, type, routeId, departTime, departPosition, departSpeed, departLane);
        }
        
        public int AddStopInVehicle(string vehId, string edgeId, double position, byte laneIndex, int durationInMs) {
            return base.Channel.AddStopInVehicle(vehId, edgeId, position, laneIndex, durationInMs);
        }
        
        public System.Threading.Tasks.Task<int> AddStopInVehicleAsync(string vehId, string edgeId, double position, byte laneIndex, int durationInMs) {
            return base.Channel.AddStopInVehicleAsync(vehId, edgeId, position, laneIndex, durationInMs);
        }
    }
}
